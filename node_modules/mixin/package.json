{
  "_args": [
    [
      {
        "raw": "mixin",
        "scope": null,
        "escapedName": "mixin",
        "name": "mixin",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/TimHui/code/roots-studio-app"
    ]
  ],
  "_from": "mixin@latest",
  "_id": "mixin@0.2.0",
  "_inCache": true,
  "_location": "/mixin",
  "_phantomChildren": {},
  "_requested": {
    "raw": "mixin",
    "scope": null,
    "escapedName": "mixin",
    "name": "mixin",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/mixin/-/mixin-0.2.0.tgz",
  "_shasum": "fb9db3d31175badb0a199dd4aad66476147b7d93",
  "_shrinkwrap": null,
  "_spec": "mixin",
  "_where": "/Users/TimHui/code/roots-studio-app",
  "author": {
    "name": "Lee Iverson",
    "email": "leei@sociologi.ca"
  },
  "dependencies": {},
  "description": "Prototypical mixin layer",
  "devDependencies": {
    "vows": ">= 0.5.6"
  },
  "directories": {},
  "dist": {
    "shasum": "fb9db3d31175badb0a199dd4aad66476147b7d93",
    "tarball": "https://registry.npmjs.org/mixin/-/mixin-0.2.0.tgz"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "main": "./mixin.js",
  "maintainers": [
    {
      "name": "leei",
      "email": "leei@sociologi.ca"
    }
  ],
  "name": "mixin",
  "optionalDependencies": {},
  "readme": "# Mixin.js\n\nMixin is an easy way to repeatedly mix functionality into a prototypical\nJavaScript class. It automatically takes care of the combination of overriding\nprototype methods and invoking constructors. Moreover, it will notify a mixed\nin constructor that is has been mixed into another class. This can be used to\nconstruct dependent mixin hierarchies.\n\n## Installation\n\nUsing npm:\n\n    npm install mixin\n\n## Usage:\n\n\n    var mixin = require(\"mixin\");\n\n    function Foo() {\n    }\n\n    Foo.prototype = {\n       t1: function() { return 't1'; }\n    };\n\n    Foo = mixin(Foo, EventEmitter);\n\nthis is the equivalent of:\n\n    function Foo() {\n        EventEmitter.call(this);\n    }\n\n    Foo.prototype = Object.create(EventEmitter.prototype);\n\nexcept that I can define a full set of prototypes in the `Foo.prototype`\nstatement before I invoke the mixin.\n\n# Usage\n\n## mixin(base, mixed)\n\nThe call `mixin(base, mixed)` returns a new constructor that adds the\nprototype for `mixed` at the back of the prototype chain for `base` and\ninvokes the constructors for both `base` and `mixed` in reverse order. If\n`mixed` has function property `included`, then this function will be invoked\nwith `this = mixed` and the new constructor class as the single argument.\n\nA constructor to be mixed in cannot have a prototype chain of its own\n(i.e. it can't itself be the product of a mixin), however this functionality\ncan be achieved by calling mixin again inside the `included` callback.\nMoreover, the same constructor can not be mixed in twice to the same\nprototypical inheritance chain.\n\n## ctor.included(base)\n\nIf `ctor` is mixed in to another constructor (e.g. by invoking `mixin(Base, ctor)`) then `ctor.included(base)` is called with the `this` set to the mixed in constructor (e.g. `ctor`) and is passed a single argument, the new constructor created by `mixin()`.  This is extremely useful for creating dependent chains of mixins (i.e. `Mixin1` requires `Mixin2`) since `mixin` itself can be invoked from within the `included` call.\n\nIf `included` returns a value, then it is used as the constructor for the call to `mixin` that invoked this function.  This behavior leads to the useful idiom:\n\n    Foo.included = function(ctor) {\n        return mixin(ctor, EventEmitter);\n    }\n\nto mix the functionality of EventEmitter into any constructor that mixes in `Foo`.\n\n## mixin.alias(obj, name, suffix, fun)\n\nCan be used to override a method already defined on `obj`. It assigns `fun` to\n`obj[name+'_with_\"+suffix]` and reassigns the current value of `obj[name]` to\n`obj[name+'_without_'+suffix]`. Finally it sets `obj[name]` to `fun`.  This is\nsimilar to Rails' 'alias_method_chain`.\n",
  "readmeFilename": "README.md",
  "version": "0.2.0"
}
